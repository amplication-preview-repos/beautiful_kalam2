/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { WebSocketConnectionService } from "../webSocketConnection.service";
import { WebSocketConnectionCreateInput } from "./WebSocketConnectionCreateInput";
import { WebSocketConnection } from "./WebSocketConnection";
import { WebSocketConnectionFindManyArgs } from "./WebSocketConnectionFindManyArgs";
import { WebSocketConnectionWhereUniqueInput } from "./WebSocketConnectionWhereUniqueInput";
import { WebSocketConnectionUpdateInput } from "./WebSocketConnectionUpdateInput";

export class WebSocketConnectionControllerBase {
  constructor(protected readonly service: WebSocketConnectionService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: WebSocketConnection })
  async createWebSocketConnection(
    @common.Body() data: WebSocketConnectionCreateInput
  ): Promise<WebSocketConnection> {
    return await this.service.createWebSocketConnection({
      data: data,
      select: {
        createdAt: true,
        id: true,
        isActive: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [WebSocketConnection] })
  @ApiNestedQuery(WebSocketConnectionFindManyArgs)
  async webSocketConnections(
    @common.Req() request: Request
  ): Promise<WebSocketConnection[]> {
    const args = plainToClass(WebSocketConnectionFindManyArgs, request.query);
    return this.service.webSocketConnections({
      ...args,
      select: {
        createdAt: true,
        id: true,
        isActive: true,
        updatedAt: true,
        url: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: WebSocketConnection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async webSocketConnection(
    @common.Param() params: WebSocketConnectionWhereUniqueInput
  ): Promise<WebSocketConnection | null> {
    const result = await this.service.webSocketConnection({
      where: params,
      select: {
        createdAt: true,
        id: true,
        isActive: true,
        updatedAt: true,
        url: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: WebSocketConnection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateWebSocketConnection(
    @common.Param() params: WebSocketConnectionWhereUniqueInput,
    @common.Body() data: WebSocketConnectionUpdateInput
  ): Promise<WebSocketConnection | null> {
    try {
      return await this.service.updateWebSocketConnection({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          isActive: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: WebSocketConnection })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteWebSocketConnection(
    @common.Param() params: WebSocketConnectionWhereUniqueInput
  ): Promise<WebSocketConnection | null> {
    try {
      return await this.service.deleteWebSocketConnection({
        where: params,
        select: {
          createdAt: true,
          id: true,
          isActive: true,
          updatedAt: true,
          url: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
