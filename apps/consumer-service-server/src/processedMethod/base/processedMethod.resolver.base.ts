/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { ProcessedMethod } from "./ProcessedMethod";
import { ProcessedMethodCountArgs } from "./ProcessedMethodCountArgs";
import { ProcessedMethodFindManyArgs } from "./ProcessedMethodFindManyArgs";
import { ProcessedMethodFindUniqueArgs } from "./ProcessedMethodFindUniqueArgs";
import { CreateProcessedMethodArgs } from "./CreateProcessedMethodArgs";
import { UpdateProcessedMethodArgs } from "./UpdateProcessedMethodArgs";
import { DeleteProcessedMethodArgs } from "./DeleteProcessedMethodArgs";
import { ProcessedMethodService } from "../processedMethod.service";
@graphql.Resolver(() => ProcessedMethod)
export class ProcessedMethodResolverBase {
  constructor(protected readonly service: ProcessedMethodService) {}

  async _processedMethodsMeta(
    @graphql.Args() args: ProcessedMethodCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [ProcessedMethod])
  async processedMethods(
    @graphql.Args() args: ProcessedMethodFindManyArgs
  ): Promise<ProcessedMethod[]> {
    return this.service.processedMethods(args);
  }

  @graphql.Query(() => ProcessedMethod, { nullable: true })
  async processedMethod(
    @graphql.Args() args: ProcessedMethodFindUniqueArgs
  ): Promise<ProcessedMethod | null> {
    const result = await this.service.processedMethod(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ProcessedMethod)
  async createProcessedMethod(
    @graphql.Args() args: CreateProcessedMethodArgs
  ): Promise<ProcessedMethod> {
    return await this.service.createProcessedMethod({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => ProcessedMethod)
  async updateProcessedMethod(
    @graphql.Args() args: UpdateProcessedMethodArgs
  ): Promise<ProcessedMethod | null> {
    try {
      return await this.service.updateProcessedMethod({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => ProcessedMethod)
  async deleteProcessedMethod(
    @graphql.Args() args: DeleteProcessedMethodArgs
  ): Promise<ProcessedMethod | null> {
    try {
      return await this.service.deleteProcessedMethod(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
