/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { ProcessedMethodService } from "../processedMethod.service";
import { ProcessedMethodCreateInput } from "./ProcessedMethodCreateInput";
import { ProcessedMethod } from "./ProcessedMethod";
import { ProcessedMethodFindManyArgs } from "./ProcessedMethodFindManyArgs";
import { ProcessedMethodWhereUniqueInput } from "./ProcessedMethodWhereUniqueInput";
import { ProcessedMethodUpdateInput } from "./ProcessedMethodUpdateInput";

export class ProcessedMethodControllerBase {
  constructor(protected readonly service: ProcessedMethodService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ProcessedMethod })
  async createProcessedMethod(
    @common.Body() data: ProcessedMethodCreateInput
  ): Promise<ProcessedMethod> {
    return await this.service.createProcessedMethod({
      data: data,
      select: {
        createdAt: true,
        id: true,
        methodName: true,
        processedAt: true,
        result: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [ProcessedMethod] })
  @ApiNestedQuery(ProcessedMethodFindManyArgs)
  async processedMethods(
    @common.Req() request: Request
  ): Promise<ProcessedMethod[]> {
    const args = plainToClass(ProcessedMethodFindManyArgs, request.query);
    return this.service.processedMethods({
      ...args,
      select: {
        createdAt: true,
        id: true,
        methodName: true,
        processedAt: true,
        result: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ProcessedMethod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async processedMethod(
    @common.Param() params: ProcessedMethodWhereUniqueInput
  ): Promise<ProcessedMethod | null> {
    const result = await this.service.processedMethod({
      where: params,
      select: {
        createdAt: true,
        id: true,
        methodName: true,
        processedAt: true,
        result: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ProcessedMethod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateProcessedMethod(
    @common.Param() params: ProcessedMethodWhereUniqueInput,
    @common.Body() data: ProcessedMethodUpdateInput
  ): Promise<ProcessedMethod | null> {
    try {
      return await this.service.updateProcessedMethod({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          methodName: true,
          processedAt: true,
          result: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ProcessedMethod })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteProcessedMethod(
    @common.Param() params: ProcessedMethodWhereUniqueInput
  ): Promise<ProcessedMethod | null> {
    try {
      return await this.service.deleteProcessedMethod({
        where: params,
        select: {
          createdAt: true,
          id: true,
          methodName: true,
          processedAt: true,
          result: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
