/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ProcessedMethod as PrismaProcessedMethod,
} from "@prisma/client";

export class ProcessedMethodServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ProcessedMethodCountArgs, "select">
  ): Promise<number> {
    return this.prisma.processedMethod.count(args);
  }

  async processedMethods(
    args: Prisma.ProcessedMethodFindManyArgs
  ): Promise<PrismaProcessedMethod[]> {
    return this.prisma.processedMethod.findMany(args);
  }
  async processedMethod(
    args: Prisma.ProcessedMethodFindUniqueArgs
  ): Promise<PrismaProcessedMethod | null> {
    return this.prisma.processedMethod.findUnique(args);
  }
  async createProcessedMethod(
    args: Prisma.ProcessedMethodCreateArgs
  ): Promise<PrismaProcessedMethod> {
    return this.prisma.processedMethod.create(args);
  }
  async updateProcessedMethod(
    args: Prisma.ProcessedMethodUpdateArgs
  ): Promise<PrismaProcessedMethod> {
    return this.prisma.processedMethod.update(args);
  }
  async deleteProcessedMethod(
    args: Prisma.ProcessedMethodDeleteArgs
  ): Promise<PrismaProcessedMethod> {
    return this.prisma.processedMethod.delete(args);
  }
}
